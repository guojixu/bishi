#
from collections import defaultdict


def dfs(u, father):
    depth[u] = depth[father] + 1
    f[u][0] = father
    for i in range(1, 21):
        f[u][i] = f[f[u][i - 1]][i - 1]
    for v in mp[u]:
        if v != father:
            dfs(v, u)


def get_father(x, k):
    t = depth[x] - k
    for i in range(20, -1, -1):
        if depth[f[x][i]] > t:
            x = f[x][i]
    return f[x][0]


if __name__ == '__main__':
    n, q = [int(_) for _ in input().split()]
    f = [[0] * 21 for _ in range(n + 1)]
    depth = [-1] * (n + 1)
    mp = defaultdict(list)
    fathers = [int(_) for _ in input().split()]
    for i in range(n - 1):
        mp[i + 2].append(fathers[i])
        mp[fathers[i]].append(i + 2)
    queries = []
    for _ in range(q):
        queries.append([int(_) for _ in input().split()])
    dfs(1, 0)
    for x, k in queries:
        print(get_father(x, k))



